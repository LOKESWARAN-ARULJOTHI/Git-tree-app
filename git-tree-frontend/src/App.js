import { useCallback, useState } from "react";
import axios from "axios";
import {
  FormControl,
  FormLabel,
  Input,
  Button,
  Box,
  Spinner,
  Flex,
  Code,
  Heading,
  Divider,
  Alert,
  AlertDescription,
  AlertIcon,
  AlertTitle,
  IconButton,
} from "@chakra-ui/react";
import { CopyIcon } from "@chakra-ui/icons";
function getCookie(name) {
  var cookieValue = null;
  if (document.cookie && document.cookie !== "") {
    var cookies = document.cookie.split(";");
    for (var i = 0; i < cookies.length; i++) {
      var cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === name + "=") {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}

function App() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [url, setUrl] = useState("");
  const [error, setError] = useState(null);

  const handleSubmit = useCallback(
    async (e) => {
      e.preventDefault();
      try {
        setLoading(true);
        const res = await axios.post(
          "/",
          {
            repourl: url,
            csrfmiddlewaretoken: getCookie("csrftoken"),
          },
          {
            credentials: "include",
            method: "POST",
            mode: "same-origin",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              "X-CSRFToken": getCookie("csrftoken"),
            },
          }
        );

        console.log(res);
        setError(null);
        setData(res.data);
        setLoading(false);
      } catch (err) {
        setLoading(false);
        setError("Please enter valid URL");
        console.log(err.message);
      }
    },
    [url]
  );

  const copyTree = async () => {
    try {
      let treeText = data.reduce((acc, cur) => acc + `${cur}\n`, "```\n");

      treeText +=
        "```\n©generated by [GitTree](https://github.com/LOKESWARAN-ARULJOTHI/Git-tree-app)\n";
      await navigator.clipboard.writeText(treeText);
    } catch (err) {
      console.log(err.message);
    }
  };

  return (
    <Flex align="center" justify="center">
      <Box width="600px">
        <Heading textAlign="center" fontSize="7xl" my=".5rem" color="blue.900">
          GitTree
        </Heading>
        <Divider mb="1rem" />
        <Box as="form" onSubmit={handleSubmit} mb="2rem">
          <Input
            type="hidden"
            name="csrfmiddlewaretoken"
            value={getCookie("csrftoken")}
          />
          <FormControl id="email">
            <Flex align="flex-end" justify="space-between">
              <Box width="80%">
                <FormLabel color="blue.600">Github Repository URL</FormLabel>

                <Input
                  type="url"
                  name="repourl"
                  id="repourl"
                  required
                  value={url}
                  placeholder="Enter a GitHub Repo url"
                  onChange={(e) => setUrl(e.target.value)}
                />
              </Box>
              <Button type="submit" colorScheme="blue" width="15%">
                Get Tree
              </Button>
            </Flex>
          </FormControl>
        </Box>

        <Box width="100%">
          {loading ? (
            <Flex justify="center" align="center">
              <Spinner size="xl" thickness="5px" color="purple" />
            </Flex>
          ) : error ? (
            <Alert status="error">
              <AlertIcon />
              <AlertTitle mr={2}>{"Error!"}</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          ) : data.length > 0 ? (
            <Box>
              <Code width="100%" p="1rem" pos="relative">
                <IconButton
                  icon={<CopyIcon />}
                  colorScheme="blue"
                  pos="absolute"
                  top="1rem"
                  right="1rem"
                  onClick={copyTree}
                />
                {data.map((item) => (
                  <pre>{item}</pre>
                ))}
                ©generated by GitTree
              </Code>
            </Box>
          ) : null}
        </Box>
      </Box>
    </Flex>
  );
}

export default App;
